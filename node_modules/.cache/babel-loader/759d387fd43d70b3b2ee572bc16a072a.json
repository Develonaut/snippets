{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmchenry/Code/snippets/src/common/CodeEditor/component.jsx\";\nimport React from \"react\";\nimport AceEditor from \"react-ace\";\nimport { editorThemes, editorLanguages } from \"./config\"; // IMPORTANT: Webpack imports and the component in general wont work without this resolver.\n\nimport \"ace-builds/webpack-resolver\"; // Tools\n\nimport \"ace-builds/src-noconflict/ext-language_tools\"; // // Modes\n// import \"ace-builds/src-noconflict/mode-css\";\n// import \"ace-builds/src-noconflict/mode-javascript\";\n// import \"ace-builds/src-noconflict/mode-jsx\";\n// // Themes\n// import \"ace-builds/src-noconflict/theme-dracula\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\neditorLanguages.forEach(({\n  value\n}) => {\n  require(`ace-builds/src-noconflict/mode-${value}`);\n\n  require(`ace-builds/src-noconflict/snippets/${value}`);\n});\neditorThemes.forEach(({\n  value\n}) => require(`ace-builds/src-noconflict/theme-${value}`));\nexport const CodeEditor = ({\n  mode = \"javascript\",\n  theme = \"dracula\",\n  onChange,\n  onCursorChange,\n  editProps = {},\n  ...other\n}) => {\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    mode: mode,\n    theme: theme,\n    onChange: onChange,\n    onCursorChange: onCursorChange,\n    name: \"code_editor\",\n    editorProps: {\n      $blockScrolling: true\n    },\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/ryanmchenry/Code/snippets/src/common/CodeEditor/component.jsx"],"names":["React","AceEditor","editorThemes","editorLanguages","forEach","value","require","CodeEditor","mode","theme","onChange","onCursorChange","editProps","other","$blockScrolling"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,UAA9C,C,CAEA;;AACA,OAAO,6BAAP,C,CAEA;;AACA,OAAO,8CAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,eAAe,CAACC,OAAhB,CAAwB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACrCC,EAAAA,OAAO,CAAE,kCAAiCD,KAAM,EAAzC,CAAP;;AACAC,EAAAA,OAAO,CAAE,sCAAqCD,KAAM,EAA7C,CAAP;AACD,CAHD;AAKAH,YAAY,CAACE,OAAb,CAAqB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACnBC,OAAO,CAAE,mCAAkCD,KAAM,EAA1C,CADT;AAIA,OAAO,MAAME,UAAU,GAAG,CAAC;AACzBC,EAAAA,IAAI,GAAG,YADkB;AAEzBC,EAAAA,KAAK,GAAG,SAFiB;AAGzBC,EAAAA,QAHyB;AAIzBC,EAAAA,cAJyB;AAKzBC,EAAAA,SAAS,GAAG,EALa;AAMzB,KAAGC;AANsB,CAAD,KAOpB;AACJ,sBACE,QAAC,SAAD;AACE,IAAA,IAAI,EAAEL,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,cAAc,EAAEC,cAJlB;AAKE,IAAA,IAAI,EAAC,aALP;AAME,IAAA,WAAW,EAAE;AAAEG,MAAAA,eAAe,EAAE;AAAnB,KANf;AAAA,OAOMD;AAPN;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAnBM;KAAMN,U","sourcesContent":["import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport { editorThemes, editorLanguages } from \"./config\";\n\n// IMPORTANT: Webpack imports and the component in general wont work without this resolver.\nimport \"ace-builds/webpack-resolver\";\n\n// Tools\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n\n// // Modes\n// import \"ace-builds/src-noconflict/mode-css\";\n// import \"ace-builds/src-noconflict/mode-javascript\";\n// import \"ace-builds/src-noconflict/mode-jsx\";\n// // Themes\n// import \"ace-builds/src-noconflict/theme-dracula\";\n\neditorLanguages.forEach(({ value }) => {\n  require(`ace-builds/src-noconflict/mode-${value}`);\n  require(`ace-builds/src-noconflict/snippets/${value}`);\n});\n\neditorThemes.forEach(({ value }) =>\n  require(`ace-builds/src-noconflict/theme-${value}`)\n);\n\nexport const CodeEditor = ({\n  mode = \"javascript\",\n  theme = \"dracula\",\n  onChange,\n  onCursorChange,\n  editProps = {},\n  ...other\n}) => {\n  return (\n    <AceEditor\n      mode={mode}\n      theme={theme}\n      onChange={onChange}\n      onCursorChange={onCursorChange}\n      name=\"code_editor\"\n      editorProps={{ $blockScrolling: true }}\n      {...other}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}