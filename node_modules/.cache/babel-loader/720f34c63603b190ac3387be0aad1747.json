{"ast":null,"code":"const javascript = {\n  items: [{\n    id: \"44da7512-cafe-435a-b47b-b6835be5a11e\",\n    name: \"Animate.js\",\n    language: \"javascript\",\n    tags: [],\n    value: `/*!\n * Apply a CSS animation to an element\n * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {Node}     node      The element to animate\n * @param  {String}   animation The animation class to apply\n * @param  {Function} onEnd     A callback function to run when the animation ends [optional]\n */\nfunction animate (node, animation, onEnd = function () {}) {\n\tnode.classList.add(animation);\n\tnode.addEventListener('animationend', function () {\n\t\tnode.classList.remove(animation);\n\t\tonEnd(node, animation);\n\t}, {once: true});\n}`\n  }, {\n    id: \"55962345-f7ab-4a74-bae4-efa7f7aaa7cb\",\n    name: \"usePrevious.js\",\n    language: \"jsx\",\n    tags: [],\n    value: `// Hook\nfunction usePrevious(value) {\n   // The ref object is a generic container whose current property is mutable ...\n   // ... and can hold any value, similar to an instance property on a class\n   const ref = useRef();\n   // Store current value in ref\n   useEffect(() => {\n      ref.current = value;\n   }, [value]); // Only re-run if value changes\n   // Return previous value (happens before update in useEffect above)\n   return ref.current;\n}`\n  }]\n};\nexport default javascript;","map":{"version":3,"sources":["/Users/ryanmchenry/Code/snippets/src/core/data/snippets/javascript.js"],"names":["javascript","items","id","name","language","tags","value"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,sCADN;AAEEC,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,QAAQ,EAAE,YAHZ;AAIEC,IAAAA,IAAI,EAAE,EAJR;AAKEC,IAAAA,KAAK,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBI,GADK,EAqBL;AACEJ,IAAAA,EAAE,EAAE,sCADN;AAEEC,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,QAAQ,EAAE,KAHZ;AAIEC,IAAAA,IAAI,EAAE,EAJR;AAKEC,IAAAA,KAAK,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBI,GArBK;AADU,CAAnB;AA2CA,eAAeN,UAAf","sourcesContent":["const javascript = {\n  items: [\n    {\n      id: \"44da7512-cafe-435a-b47b-b6835be5a11e\",\n      name: \"Animate.js\",\n      language: \"javascript\",\n      tags: [],\n      value: `/*!\n * Apply a CSS animation to an element\n * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com\n * @param  {Node}     node      The element to animate\n * @param  {String}   animation The animation class to apply\n * @param  {Function} onEnd     A callback function to run when the animation ends [optional]\n */\nfunction animate (node, animation, onEnd = function () {}) {\n\tnode.classList.add(animation);\n\tnode.addEventListener('animationend', function () {\n\t\tnode.classList.remove(animation);\n\t\tonEnd(node, animation);\n\t}, {once: true});\n}`,\n    },\n    {\n      id: \"55962345-f7ab-4a74-bae4-efa7f7aaa7cb\",\n      name: \"usePrevious.js\",\n      language: \"jsx\",\n      tags: [],\n      value: `// Hook\nfunction usePrevious(value) {\n   // The ref object is a generic container whose current property is mutable ...\n   // ... and can hold any value, similar to an instance property on a class\n   const ref = useRef();\n   // Store current value in ref\n   useEffect(() => {\n      ref.current = value;\n   }, [value]); // Only re-run if value changes\n   // Return previous value (happens before update in useEffect above)\n   return ref.current;\n}`,\n    },\n  ],\n};\n\nexport default javascript;\n"]},"metadata":{},"sourceType":"module"}